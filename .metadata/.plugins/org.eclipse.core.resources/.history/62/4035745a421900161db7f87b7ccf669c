/*
 * Activity 4
 * Nisha McNealis
 */



import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.ArrayList;

/**
 * The Deck class represents a shuffled deck of cards.
 * It provides several operations including
 *      initialize, shuffle, deal, and check if empty.
 */
public class Deck {

	/**
	 * cards contains all the cards in the deck.
	 */
	private ArrayList<Card> cards;

	/**
	 * size is the number of not-yet-dealt cards.
	 * Cards are dealt from the top (highest index) down.
	 * The next card to be dealt is at size - 1.
	 */
	private int size;
	static int[] randoms;


	/**
	 * Creates a new <code>Deck</code> instance.<BR>
	 * It pairs each element of ranks with each element of suits,
	 * and produces one of the corresponding card.
	 * @param ranks is an array containing all of the card ranks.
	 * @param suits is an array containing all of the card suits.
	 * @param values is an array containing all of the card point values.
	 */
	public Deck(String[] ranks, String[] suits, int[] values) {

//			cards = new ArrayList<Card>();
//			for (int j = 0; j < ranks.length; j++) {
//				for (String suitString : suits) {
//					cards.add(new Card(ranks[j], suitString, values[j]));
//				}
//			}
//			size = cards.size();
//			shuffle();

//		int m = Math.min(ranks.length, suits.length);
//		m = Math.min (m, values.length);
		cards = new ArrayList<Card>();
		for (int i = 0; i < ranks.length; i++){
			for (String suitString : suits) {
				cards.add(new Card(ranks[i], suitString, values[i]));
//			Card c = new Card (ranks[i], suits[i], values[i]);
//			cards.add(c);
		}
		size = cards.size();
		//System.out.println(size);
		shuffle();
		}
	}

	/**
	 * Determines if this deck is empty (no undealt cards).
	 * @return true if this deck is empty, false otherwise.
	 */
	public boolean isEmpty() {
		return (this.size == 0);
	}

	/**
	 * Accesses the number of undealt cards in this deck.
	 * @return the number of undealt cards in this deck.
	 */
	public int size() {
		return this.size;
	}

	/**
	 * Randomly permute the given collection of cards
	 * and reset the size to represent the entire deck.
	 */
	public void shuffle() {
		for (int k = cards.size() - 1; k > 0; k--) {
			int howMany = k + 1;
			int start = 0;
			int randPos = (int) (Math.random() * howMany) + start;
			Card temp = cards.get(k);
			cards.set(k, cards.get(randPos));
			cards.set(randPos, temp);
		}
		size = cards.size();
	}
//	public void shuffle() {
//		for (int k = cards.size() - 1; k > 0; k--){
//			System.out.print(k);
//			int r = random(cards.size());
//			Card cardR = cards.get(r);
//			Card cardK = cards.get(k);
//			Card stayK = cards.get(k);
//			cards.set(k, cardR);
//			cards.set(r, stayK);
//			//cardR.setAll(cardK.getSuit(), cardK.getRank(), cardK.getPoints());
//			//cardK.setAll(stayR.getSuit(), stayR.getRank(), stayR.getPoints());
//			size = cards.size();
//			}
//	}
	public static int random(int v){
		int num = 0;
		randoms = new int[v];
		int r = (int)(Math.random() * (v + 1));
		for (int val = 0; val < v; val ++){
			if (randoms[val] != r){
				randoms[num] = r;
				return r;
			}
			else{
				return random(v);
			}
		}
		return random(v);
	}
	

	/**
	 * Deals a card from this deck.
	 * @return the card just dealt, or null if all the cards have been
	 *         previously dealt.
	 */
	public Card deal() {
		if (size == 0) return null;
		size -= 1;
		return cards.get(size);
	}

	/**
	 * Generates and returns a string representation of this deck.
	 * @return a string representation of this deck.
	 */
	@Override
	public String toString() {
		String rtn = "size = " + size + "\nUndealt cards: \n";

		for (int k = size - 1; k >= 0; k--) {
			rtn = rtn + cards.get(k);
			if (k != 0) {
				rtn = rtn + ", ";
			}
			if ((size - k) % 2 == 0) {
				// Insert carriage returns so entire deck is visible on console.
				rtn = rtn + "\n";
			}
		}

		rtn = rtn + "\nDealt cards: \n";
		for (int k = cards.size() - 1; k >= size; k--) {
			rtn = rtn + cards.get(k);
			if (k != size) {
				rtn = rtn + ", ";
			}
			if ((k - cards.size()) % 2 == 0) {
				// Insert carriage returns so entire deck is visible on console.
				rtn = rtn + "\n";
			}
		}

		rtn = rtn + "\n";
		return rtn;
	}
}
